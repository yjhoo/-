문제 설명
고고학자인 튜브는 고대 유적지에서 보물과 유적이 가득할 것으로 추정되는 비밀의 문을 발견하였습니다. 그런데 문을 열려고 살펴보니 특이한 형태의 자물쇠로 잠겨 있었고 문 앞에는 특이한 형태의 열쇠와 함께 자물쇠를 푸는 방법에 대해 다음과 같이 설명해 주는 종이가 발견되었습니다.

잠겨있는 자물쇠는 격자 한 칸의 크기가 1 x 1인 N x N 크기의 정사각 격자 형태이고 특이한 모양의 열쇠는 M x M 크기인 정사각 격자 형태로 되어 있습니다.

자물쇠에는 홈이 파여 있고 열쇠 또한 홈과 돌기 부분이 있습니다. 열쇠는 회전과 이동이 가능하며 열쇠의 돌기 부분을 자물쇠의 홈 부분에 딱 맞게 채우면 자물쇠가 열리게 되는 구조입니다. 자물쇠 영역을 벗어난 부분에 있는 열쇠의 홈과 돌기는 자물쇠를 여는 데 영향을 주지 않지만, 자물쇠 영역 내에서는 열쇠의 돌기 부분과 자물쇠의 홈 부분이 정확히 일치해야 하며 열쇠의 돌기와 자물쇠의 돌기가 만나서는 안됩니다. 또한 자물쇠의 모든 홈을 채워 비어있는 곳이 없어야 자물쇠를 열 수 있습니다.

열쇠를 나타내는 2차원 배열 key와 자물쇠를 나타내는 2차원 배열 lock이 매개변수로 주어질 때, 열쇠로 자물쇠를 열수 있으면 true를, 열 수 없으면 false를 return 하도록 solution 함수를 완성해주세요.

제한사항
key는 M x M(3 ≤ M ≤ 20, M은 자연수)크기 2차원 배열입니다.
lock은 N x N(3 ≤ N ≤ 20, N은 자연수)크기 2차원 배열입니다.
M은 항상 N 이하입니다.
key와 lock의 원소는 0 또는 1로 이루어져 있습니다.
0은 홈 부분, 1은 돌기 부분을 나타냅니다.
입출력 예
key	lock	result
[[0, 0, 0], [1, 0, 0], [0, 1, 1]]	[[1, 1, 1], [1, 1, 0], [1, 0, 1]]	true
입출력 예에 대한 설명

import java.util.*;
class Solution {
    public boolean solution(int[][] key, int[][] lock) {
        //int count = 0;
        int count2 = 0;
        int rotate = 0;
        int[][] key_r = key;
        Vector<ArrayList<Integer>> v = new Vector<ArrayList<Integer>>();
        int[][] paper = new int[lock.length + 2 * (key.length - 1)][lock.length + 2 * (key.length - 1)];
        //System.out.println(paper.length);
        boolean answer = false;
        for(int i = 0 ; i < paper.length ; i++){
            Arrays.fill(paper[i],0);
        }
        //System.out.println(count);
        
        for(int i = 0; i < lock.length; i++){
            for(int j = 0; j < lock.length; j++){
                if(lock[i][j] == 1){
                    paper[key.length - 1 + i][key.length - 1 + j] = 1;
                }else{
                    v.add(new ArrayList<Integer>());
                    v.get(count2).add(key.length - 1 + i);
                    v.get(count2).add(key.length - 1 + j);
                    v.get(count2).add(0);
                    count2++;
                }
            }
        }
        for(int i = 0; i < count2 ; i++){
            //System.out.println(v.get(i));
        }
        for(int i = 0; i < paper.length; i++){
            for(int j = 0; j < paper.length; j++){
                System.out.print(paper[i][j]);
            }
            System.out.println();
        }
        while(rotate < 4){
            for(int i = 0; i < key.length; i++){
                for(int j = 0; j < key.length; j++){
                    System.out.print(key_r[i][j]);
                }
                System.out.println();
            }
            System.out.println();
            
            if(f_result(key_r, paper, 0, 0, count2, v)){
                return true;
            }else{
                key_r = f_rotate(key_r, lock);
                rotate++;
            }
        }
        return answer;
    }
    
    public int[][] f_rotate(int[][] key, int[][] lock){
        int[][] temp = new int[key.length][key.length];
        for(int i = 0; i < key.length; i++){
            for(int j = 0; j < key.length; j++){
                temp[i][j] = key[j][key.length - 1 - i];
            }
        }
        return temp;
    }
    public void f_row(int[][] key, int[][] paper, int row, int col, int count2, Vector<ArrayList<Integer>> v){
        int temp = row + 1;
        f_result(key, paper, temp, col, count2, v);
    }
    public void f_col(int[][] key, int[][] paper, int row, int col, int count2, Vector<ArrayList<Integer>> v){
        int temp = col + 1;
        f_result(key, paper, row, temp, count2, v);
    }
    public boolean f_result(int[][] key, int[][] paper, int row, int col, int count2, Vector<ArrayList<Integer>> v){
        int temp = 0;
        for(int i = row; i < key.length + row; i++){
            for( int j = col ; j < key.length + col; j++){
                temp = key[i - row][j - col] + paper[i][j];
                if(temp == 2){
                    break;
                }
               for(int k = 0 ; k < count2 ; k++){
                   if(v.get(k).get(0) == i && j == v.get(k).get(1)){
                       v.get(k).set(2,1);
                       for(int q = 0; q < count2 ; q++){
                            System.out.println(v.get(q));
                        }
                   }
               } 
            }
            for(int k = 0 ; k < count2 ; k++){
                if(0 == v.get(k).get(2)){
                    for(int n = 0 ; n < count2 ; n++){
                        v.get(k).set(2,0);
                    }
                    break;
                }
                if(k == count2 - 1 && 1 == v.get(k).get(2)){
                    return true;
                }
           } 
        }
        if(row < 2 * (key.length - 1) ) {
            f_row(key, paper, row, col, count2, v);
        }
        if(col < 2 * (key.length - 1) ){
            f_col(key, paper, row, col, count2, v);
        }
        return false;
    }
    
}
