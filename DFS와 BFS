/*
백준 1260

DFS와 BFS 성공
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	81871	26197	15286	30.844%
문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.

예제 입력 1 
4 5 1
1 2
1 3
1 4
2 4
3 4
예제 출력 1 
1 2 4 3
1 2 3 4
예제 입력 2 
5 5 3
5 4
5 2
1 2
3 4
3 1
예제 출력 2 
3 1 2 5 4
3 1 4 2 5
예제 입력 3 
1000 1 1000
999 1000
예제 출력 3 
1000 999
1000 999
출처
문제를 만든 사람: author5
데이터를 추가한 사람: djm03178 doju
어색한 표현을 찾은 사람: doju
빠진 조건을 찾은 사람: pumpyboom
알고리즘 분류
BFS
DFS
*/

import java.util.*;

class Main {
	
	public static int[][] map;
	public static boolean[] visit;
	public static int n, m, v;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
    //초기 값 scan
		n = sc.nextInt();
		m = sc.nextInt();
		v = sc.nextInt();
    // 원소끼리 연결되는지를 나타내는 테이블
		map = new int[n+1][n+1];
    // 이미 표시가 되었는지 여부를 판별하는 배열
		visit = new boolean[n+1];
    // 배열 값 초기화
		for(int i = 0; i < n+1; i++) {
			Arrays.fill(map[i], 0);
		}
		Arrays.fill(visit, false);
		
    // 원소끼리 연결되었을 경우 테이블에 표시함
		for(int j = 0; j < m; j++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			map[a][b] = 1;
			map[b][a] = 1;
		}
		
    // dfs 수행
		dfs(v);
		System.out.println();
    // 이미 표시된 여부 판별 초기화
		Arrays.fill(visit, false);
    // bfs 수행
		bfs(v);		
		sc.close();
		
	}
  
	// dfs 수행
	public static void dfs(int v) {
		visit[v] = true;
		System.out.print(v + " ");
		for(int i = 1; i < n + 1; i++) {
			if(visit[i]==false&&map[v][i]==1) {
				dfs(i);
			}
		}
		
	}
  
	// bfs 수행
	public static void bfs(int v) {
		Queue<Integer> q = new LinkedList<Integer>();
		q.offer(v);
		visit[v] = true;
		while(!q.isEmpty()) {
			int temp = q.poll();
			System.out.print(temp + " ");
			for(int i = 1; i < n + 1; i++ ) {
				if(map[temp][i] == 1 && visit[i] == false) {
					q.offer(i);
					visit[i] = true;
				}
			}
		}
	}

}
