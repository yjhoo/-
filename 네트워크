/*
네트워크
문제 설명
네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.

컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.

제한사항
컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.
각 컴퓨터는 0부터 n-1인 정수로 표현합니다.
i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.
computer[i][i]는 항상 1입니다.
입출력 예
n	computers	return
3	[[1, 1, 0], [1, 1, 0], [0, 0, 1]]	2
3	[[1, 1, 0], [1, 1, 1], [0, 1, 1]]	1
입출력 예 설명
예제 #1
아래와 같이 2개의 네트워크가 있습니다.
image0.png

예제 #2
아래와 같이 1개의 네트워크가 있습니다.
*/

import java.util.*;
class Solution {
    boolean[] visited;
    public int solution(int n, int[][] computers) {
        // 적용된 숫자인지 확인하려는 배열
        visited = new boolean[n];
        int answer = 0;
        for(int i = 0; i < n; i++){
            // 연결된 적이 없는 숫자가 들어요면 실행
            if(visited[i] == false){
                answer++;
                bfs(computers, i, n);
            }
        }
        return answer;
    }
    public void bfs(int[][] computers,int num, int size){
        Queue<Integer> q = new LinkedList<Integer>();
        // 들어온 숫자 q에 추가
        q.offer(num);
        // 임시 저장소인 temp에 저장
        int temp = num;
        while(!q.isEmpty()){
            // q에서 나온 수를 저장
            temp = q.poll();
            for(int i = 0 ; i < size ; i++){
                // 한번도 연결된 적이 없고 적용된 적도 없는 숫자이면 q에 추가
                if(computers[temp][i] == 1 && visited[i] == false){
                    q.offer(i);
                    visited[i] = true;
                }    
            }
        }
    }
}
